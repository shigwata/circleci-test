version: 2

references:
  repository_root: &repository_root
    /go/src/github.com/shigwata/circleci-test
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
  load_code: &load_code
    run:
      name: load code from workspace
      command: |
        # Move all files and dotfiles to current directory
        shopt -s dotglob
        mv /tmp/workspace/app/* .
        shopt -u dotglob

jobs:

  checkout_code:
    working_directory: ~/app
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - checkout
      - run:
          command: |
            mkdir -p /tmp/workspace/app
            shopt -s dotglob
            mv * /tmp/workspace/app/
            shopt -u dotglob
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - app

  build:
    working_directory: *repository_root
    docker:
      - image: vvakame/circleci-gaego
    steps:
      - *attach_workspace
      - *load_code

      - restore_cache:
          keys:
            - dep-cache-{{ checksum "go/Gopkg.lock" }}
            - dep-cache-

      - run: ls -al /tmp/workspace/app/

      - run: ls -al
      - run: printenv
      - run: go version
      - run: goapp version
      - run: goapp env
      - run: npm version

      - run:
          name: build go
          working_directory: go
          command: |
            make setup

      - run:
          name: test go
          working_directory: go
          command: |
            make test

      - run:
          name: build node
          command: |
            touch ./node/node2.txt
            ls -al ./node/

        # cache
        - save_cache:
            key: dep-cache-{{ checksum "go/Gopkg.lock" }}
            paths:
              - go/vendor

      # persist_to_workspace
      - run:
          name: persist to workspace
          command: |
            rm -rf /tmp/workspace/app/go
            cp -r go /tmp/workspace/app
            rm -rf /tmp/workspace/app/node
            cp -r node /tmp/workspace/app
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - app/go
            - app/node

  build_java:
    working_directory: ~/app
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - *attach_workspace
      - *load_code

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "java/my-app/pom.xml" }}
          - v1-dependencies-

      - run: ls -al /tmp/workspace/app/

      - run:
          name: install gcloud
          command: |
            sudo apt-get install lsb-release
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install google-cloud-sdk
      - run:
          name: install components
          command: |
            sudo apt-get install google-cloud-sdk-datastore-emulator

      - run: ls -al
      - run: gcloud version
      - run: gcloud components list
      - run: java -version
      - run: mvn --version
      - run: printenv
      - run:
          name: build java
          working_directory: java/my-app
          command: |
            mvn package

      - save_cache:
          paths:
            - java/my-app/target
          key: v1-dependencies-{{ checksum "java/my-app/pom.xml" }}

      # persist_to_workspace
      - run:
          name: persist to workspace
          command: |
            rm -rf /tmp/workspace/app/java
            cp -r java /tmp/workspace/app
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - app/java

  deploy:
    working_directory: *repository_root
    docker:
      - image: vvakame/circleci-gaego
    steps:
      - *attach_workspace
      - *load_code
      - run: ls -al /tmp/workspace/app/

      - run: ls -al go java node
      - run: printenv

      - deploy:
          name: Deploy
          command: |
            echo "deploy done!"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - checkout_code
      - build:
          requires:
            - checkout_code
      - build_java:
          requires:
            - checkout_code
      - deploy:
          requires:
            - build
            - build_java
